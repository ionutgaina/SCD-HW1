/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "oauth.h"
#include "client.h"

using namespace std;

	CLIENT *clnt;
	MyClient client;

// 	CLIENT *clnt;
// 	AuthResponse  *result_1;
// 	AuthRequest auth_1_arg1;
// 	ApproveTokenResponse  *result_2;
// 	ApproveTokenRequest approve_token_1_arg1;
// 	OauthAccessTokenResponse  *result_3;
// 	OauthAccessTokenRequest oauth_access_token_1_arg1;
// 	OauthAccessTokenResponse  *result_4;
// 	OauthRefreshTokenRequest oauth_refresh_token_1_arg1;
// 	ExecuteActionResponse  *result_5;
// 	ExecuteActionRequest execute_action_1_arg1;

// 	result_1 = auth_1(auth_1_arg1, clnt);
// 	if (result_1 == (AuthResponse *) NULL) {
// 		clnt_perror (clnt, "call failed");
// 	}
// 	result_2 = approve_token_1(approve_token_1_arg1, clnt);
// 	if (result_2 == (ApproveTokenResponse *) NULL) {
// 		clnt_perror (clnt, "call failed");
// 	}
// 	result_3 = oauth_access_token_1(oauth_access_token_1_arg1, clnt);
// 	if (result_3 == (OauthAccessTokenResponse *) NULL) {
// 		clnt_perror (clnt, "call failed");
// 	}
// 	result_4 = oauth_refresh_token_1(oauth_refresh_token_1_arg1, clnt);
// 	if (result_4 == (OauthAccessTokenResponse *) NULL) {
// 		clnt_perror (clnt, "call failed");
// 	}
// 	result_5 = execute_action_1(execute_action_1_arg1, clnt);
// 	if (result_5 == (ExecuteActionResponse *) NULL) {
// 		clnt_perror (clnt, "call failed");
// 	}

void
request_operation(tuple<string, string, int> operation)
{
	string id = get<0>(operation);

	AuthRequest req;
	req.user_id = (char *)id.c_str();
	AuthResponse *result = auth_1(req, clnt);

	if (result == (AuthResponse *) NULL) {
		clnt_perror (clnt, "call failed auth request");
	}

	if (result->status == StatusCode::USER_NOT_FOUND_) {
		cout << "USER_NOT_FOUND\n" << endl;
		return;
	}

	
	ApproveTokenRequest approve_token_1_arg1 = {result->token};
	ApproveTokenResponse *result_2 = approve_token_1(approve_token_1_arg1, clnt);

	if (result_2 == (ApproveTokenResponse *) NULL) {
		clnt_perror (clnt, "call failed approve request");
	}

	OauthAccessTokenRequest oauth_access_token_1_arg1;
	oauth_access_token_1_arg1.user_id = (char *)id.c_str();
	oauth_access_token_1_arg1.token = result->token;
	oauth_access_token_1_arg1.is_refresh_token = get<2>(operation);
	OauthAccessTokenResponse *result_3 = oauth_access_token_1(oauth_access_token_1_arg1, clnt);

	if (result_3 == (OauthAccessTokenResponse *) NULL) {
		clnt_perror (clnt, "call failed access request");
	}

	if (result_3->status != StatusCode::OK_) {
		cout << "REQUEST_DENIED\n" << endl;
		return;
	}

	cout << result_2->token << " -> " << result_3->token;

	if (result_3->refresh_token != NULL) {
		cout << "," << result_3->refresh_token << endl;
	} else {
		cout << endl;
	}
}

int
main (int argc, char *argv[])
{
	char *host;


	string error = init_client(argc, argv);
	if (error != "") {
		printf("%s", error.c_str());
		exit(1);
	}

	host = argv[1];


	#ifndef	DEBUG
		clnt = clnt_create (host, OAUTH_PROG, OAUTH_VERS, "udp");
		if (clnt == NULL) {
			clnt_pcreateerror (host);
			exit (1);
		}
	#endif	/* DEBUG */

	while(client.requests.empty() == false) {
		tuple<string, string, int> request = client.requests.front();
		client.requests.pop();

		string action = get<1>(request);
		if (action == "REQUEST") {
			cout << "REQUEST " << get<0>(request) << " " << get<2>(request) << endl;
			request_operation(request);
		} else {
			// TODO Action
		}
	}

	#ifndef	DEBUG
		clnt_destroy (clnt);
	#endif	 /* DEBUG */

exit (0);
}

std::string init_client(int argc, char **argv) {
    if (argc != 3) {
        return "Usage: " + std::string(argv[0]) + " <server_host> <input file>\n";
    }

    client = MyClient(argv[2]);

    if (client.requests.empty()) {
        return "Error: Unable to load data.\n";
    }

    return "";
}
