/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "oauth.h"
#include "server.h"
#include <stdio.h>
#include <stdlib.h>
#include <rpc/pmap_clnt.h>
#include <string.h>
#include <memory.h>
#include <sys/socket.h>
#include <netinet/in.h>

#ifndef SIG_PF
#define SIG_PF void(*)(int)
#endif

static AuthResponse *
_auth_1 (AuthRequest  *argp, struct svc_req *rqstp)
{
	return (auth_1_svc(*argp, rqstp));
}

static ApproveTokenResponse *
_approve_token_1 (ApproveTokenRequest  *argp, struct svc_req *rqstp)
{
	return (approve_token_1_svc(*argp, rqstp));
}

static OauthAccessTokenResponse *
_oauth_access_token_1 (OauthAccessTokenRequest  *argp, struct svc_req *rqstp)
{
	return (oauth_access_token_1_svc(*argp, rqstp));
}

static OauthAccessTokenResponse *
_oauth_refresh_token_1 (OauthRefreshTokenRequest  *argp, struct svc_req *rqstp)
{
	return (oauth_refresh_token_1_svc(*argp, rqstp));
}

static ExecuteActionResponse *
_execute_action_1 (ExecuteActionRequest  *argp, struct svc_req *rqstp)
{
	return (execute_action_1_svc(*argp, rqstp));
}

static void
oauth_prog_1(struct svc_req *rqstp, register SVCXPRT *transp)
{
	union {
		AuthRequest auth_1_arg;
		ApproveTokenRequest approve_token_1_arg;
		OauthAccessTokenRequest oauth_access_token_1_arg;
		OauthRefreshTokenRequest oauth_refresh_token_1_arg;
		ExecuteActionRequest execute_action_1_arg;
	} argument;
	char *result;
	xdrproc_t _xdr_argument, _xdr_result;
	char *(*local)(char *, struct svc_req *);

	switch (rqstp->rq_proc) {
	case NULLPROC:
		(void) svc_sendreply (transp, (xdrproc_t) xdr_void, (char *)NULL);
		return;

	case auth:
		_xdr_argument = (xdrproc_t) xdr_AuthRequest;
		_xdr_result = (xdrproc_t) xdr_AuthResponse;
		local = (char *(*)(char *, struct svc_req *)) _auth_1;
		break;

	case approve_token:
		_xdr_argument = (xdrproc_t) xdr_ApproveTokenRequest;
		_xdr_result = (xdrproc_t) xdr_ApproveTokenResponse;
		local = (char *(*)(char *, struct svc_req *)) _approve_token_1;
		break;

	case oauth_access_token:
		_xdr_argument = (xdrproc_t) xdr_OauthAccessTokenRequest;
		_xdr_result = (xdrproc_t) xdr_OauthAccessTokenResponse;
		local = (char *(*)(char *, struct svc_req *)) _oauth_access_token_1;
		break;

	case oauth_refresh_token:
		_xdr_argument = (xdrproc_t) xdr_OauthRefreshTokenRequest;
		_xdr_result = (xdrproc_t) xdr_OauthAccessTokenResponse;
		local = (char *(*)(char *, struct svc_req *)) _oauth_refresh_token_1;
		break;

	case execute_action:
		_xdr_argument = (xdrproc_t) xdr_ExecuteActionRequest;
		_xdr_result = (xdrproc_t) xdr_ExecuteActionResponse;
		local = (char *(*)(char *, struct svc_req *)) _execute_action_1;
		break;

	default:
		svcerr_noproc (transp);
		return;
	}
	memset ((char *)&argument, 0, sizeof (argument));
	if (!svc_getargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		svcerr_decode (transp);
		return;
	}
	result = (*local)((char *)&argument, rqstp);
	if (result != NULL && !svc_sendreply(transp, (xdrproc_t) _xdr_result, result)) {
		svcerr_systemerr (transp);
	}
	if (!svc_freeargs (transp, (xdrproc_t) _xdr_argument, (caddr_t) &argument)) {
		fprintf (stderr, "%s", "unable to free arguments");
		exit (1);
	}
	return;
}

int
main (int argc, char **argv)
{
	register SVCXPRT *transp;

	pmap_unset (OAUTH_PROG, OAUTH_VERS);

	transp = svcudp_create(RPC_ANYSOCK);
	if (transp == NULL) {
		fprintf (stderr, "%s", "cannot create udp service.");
		exit(1);
	}
	if (!svc_register(transp, OAUTH_PROG, OAUTH_VERS, oauth_prog_1, IPPROTO_UDP)) {
		fprintf (stderr, "%s", "unable to register (OAUTH_PROG, OAUTH_VERS, udp).");
		exit(1);
	}

	transp = svctcp_create(RPC_ANYSOCK, 0, 0);
	if (transp == NULL) {
		fprintf (stderr, "%s", "cannot create tcp service.");
		exit(1);
	}
	if (!svc_register(transp, OAUTH_PROG, OAUTH_VERS, oauth_prog_1, IPPROTO_TCP)) {
		fprintf (stderr, "%s", "unable to register (OAUTH_PROG, OAUTH_VERS, tcp).");
		exit(1);
	}

	std::string error = init_server(argc, argv);
	if (error != "") {
		fprintf(stderr, "%s", error.c_str());
		exit(1);
	}

	svc_run ();
	fprintf (stderr, "%s", "svc_run returned");
	exit (1);
	/* NOTREACHED */
}
